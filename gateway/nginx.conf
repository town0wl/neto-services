user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

#load_module /etc/nginx/modules/ngx_http_js_module.so;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

server {
    access_log /var/log/nginx/api_access.log main; # Each API may also log to a 
                                                   # separate file

    listen 8080 default_server;
    server_name _;

    # TLS config

    # Error responses
    #error_page 404 = @400;         # Invalid paths are treated as bad requests
    proxy_intercept_errors on;     # Do not send backend errors to the client
    default_type application/json; # If no content-type then assume JSON

#    location / {

    location = /status {
        proxy_pass http://security:3000/status;
    }

    location = /_auth {
        internal;
        proxy_pass http://security:3000/v1/token/validation;
        proxy_method GET;
        proxy_pass_request_body off;
        proxy_set_header        Content-Length "";
        }

    location = /v1/register {
        limit_except POST {
            deny all; 
        }
        proxy_pass http://security:3000/v1/user;
    }

    location = /v1/token {
        limit_except POST {
            deny all;
        }
        proxy_pass http://security:3000/v1/token;
    }

    location = /v1/user {
        limit_except GET {
            deny all;
        }
        proxy_pass http://security:3000/v1/user;
        auth_request /_auth;
    }

    location = /v1/upload {
        limit_except POST {
            deny all;
        }
        proxy_pass http://uploader:3000/v1/upload;
        auth_request /_auth;
    }

    location ~ /v1/user/[^/]+ {
        limit_except GET {
            deny all;
        }
        rewrite    /v1/user/([^/]+) /images/$1 break;
        proxy_pass http://storage:9000;
        auth_request /_auth;
    }

  #  return 404; # Catch-all
#	}
}

}
